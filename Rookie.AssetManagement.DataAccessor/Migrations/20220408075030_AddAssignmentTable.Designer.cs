// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rookie.AssetManagement.DataAccessor.Data;

namespace Rookie.AssetManagement.DataAccessor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220408075030_AddAssignmentTable")]
    partial class AddAssignmentTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InstallDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryID = 1,
                            Code = "LA000001",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 990, DateTimeKind.Local).AddTicks(601),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(1655),
                            Location = 1,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryID = 1,
                            Code = "LA000002",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3226),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3241),
                            Location = 1,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryID = 1,
                            Code = "LA000003",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3245),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3247),
                            Location = 1,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryID = 1,
                            Code = "LA000004",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3248),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3250),
                            Location = 1,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryID = 1,
                            Code = "LA000005",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3252),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3254),
                            Location = 2,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryID = 2,
                            Code = "MO000001",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3256),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3256),
                            Location = 1,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryID = 2,
                            Code = "MO000002",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3258),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3259),
                            Location = 1,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryID = 2,
                            Code = "MO000003",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3262),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3264),
                            Location = 1,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryID = 2,
                            Code = "MO000004",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3265),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3266),
                            Location = 2,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryID = 2,
                            Code = "MO000005",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3267),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3268),
                            Location = 2,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryID = 2,
                            Code = "MO000006",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3270),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3270),
                            Location = 2,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryID = 3,
                            Code = "PC000001",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3272),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3273),
                            Location = 1,
                            Name = "Personal Computer",
                            Specification = "Specification of PC",
                            State = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryID = 3,
                            Code = "PC000002",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3274),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3275),
                            Location = 1,
                            Name = "Personal Computer",
                            Specification = "Specification of PC",
                            State = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryID = 3,
                            Code = "PC000003",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3276),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3277),
                            Location = 2,
                            Name = "Personal Computer",
                            Specification = "Specification of PC",
                            State = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryID = 3,
                            Code = "PC000004",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3279),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3280),
                            Location = 2,
                            Name = "Personal Computer",
                            Specification = "Specification of PC",
                            State = 1
                        },
                        new
                        {
                            Id = 16,
                            CategoryID = 1,
                            Code = "LA000006",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3281),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3282),
                            Location = 1,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 2
                        },
                        new
                        {
                            Id = 17,
                            CategoryID = 1,
                            Code = "LA000007",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3283),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3284),
                            Location = 1,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 2
                        },
                        new
                        {
                            Id = 18,
                            CategoryID = 1,
                            Code = "LA000008",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3285),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3286),
                            Location = 1,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 3
                        },
                        new
                        {
                            Id = 19,
                            CategoryID = 1,
                            Code = "LA000009",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3288),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3288),
                            Location = 2,
                            Name = "Laptop HP Pro Book 450 G1",
                            Specification = "Specification of Laptop",
                            State = 2
                        },
                        new
                        {
                            Id = 20,
                            CategoryID = 2,
                            Code = "MO000007",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3290),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3291),
                            Location = 1,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 3
                        },
                        new
                        {
                            Id = 21,
                            CategoryID = 2,
                            Code = "MO000008",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3303),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3304),
                            Location = 2,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 2
                        },
                        new
                        {
                            Id = 22,
                            CategoryID = 2,
                            Code = "MO000009",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3305),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3306),
                            Location = 2,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 2
                        },
                        new
                        {
                            Id = 23,
                            CategoryID = 2,
                            Code = "MO0000010",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3307),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3308),
                            Location = 1,
                            Name = "Monitor Dell UltraSharp",
                            Specification = "Specification of Monitor",
                            State = 3
                        },
                        new
                        {
                            Id = 24,
                            CategoryID = 3,
                            Code = "PC000005",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3310),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3311),
                            Location = 1,
                            Name = "Personal Computer",
                            Specification = "Specification of PC",
                            State = 3
                        },
                        new
                        {
                            Id = 25,
                            CategoryID = 3,
                            Code = "PC000006",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3312),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3313),
                            Location = 1,
                            Name = "Personal Computer",
                            Specification = "Specification of PC",
                            State = 3
                        },
                        new
                        {
                            Id = 26,
                            CategoryID = 3,
                            Code = "PC000007",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3314),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3315),
                            Location = 2,
                            Name = "Personal Computer",
                            Specification = "Specification of PC",
                            State = 3
                        },
                        new
                        {
                            Id = 27,
                            CategoryID = 3,
                            Code = "PC000008",
                            InstallDate = new DateTime(2023, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3316),
                            LastUpdate = new DateTime(2022, 4, 8, 14, 50, 29, 991, DateTimeKind.Local).AddTicks(3317),
                            Location = 2,
                            Name = "Personal Computer",
                            Specification = "Specification of PC",
                            State = 2
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.AssetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laptop",
                            ShortName = "LA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Monitor",
                            ShortName = "MO"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Personal Computer",
                            ShortName = "PC"
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetID")
                        .HasColumnType("int");

                    b.Property<int?>("AssignByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssignToID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetID");

                    b.HasIndex("AssignByID");

                    b.HasIndex("AssignToID");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssetID = 16,
                            AssignByID = 4,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(3649),
                            AssignToID = 14,
                            Note = "Assign asset to this staff.",
                            State = 1
                        },
                        new
                        {
                            Id = 2,
                            AssetID = 17,
                            AssignByID = 4,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4715),
                            AssignToID = 15,
                            Note = "Assign asset to this staff.",
                            State = 1
                        },
                        new
                        {
                            Id = 3,
                            AssetID = 18,
                            AssignByID = 4,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4721),
                            AssignToID = 16,
                            Note = "Assign asset to this staff.",
                            State = 2
                        },
                        new
                        {
                            Id = 4,
                            AssetID = 19,
                            AssignByID = 6,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4723),
                            AssignToID = 8,
                            Note = "Assign asset to this staff.",
                            State = 1
                        },
                        new
                        {
                            Id = 5,
                            AssetID = 20,
                            AssignByID = 4,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4726),
                            AssignToID = 17,
                            Note = "Assign asset to this staff.",
                            State = 2
                        },
                        new
                        {
                            Id = 6,
                            AssetID = 21,
                            AssignByID = 6,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4727),
                            AssignToID = 9,
                            Note = "Assign asset to this staff.",
                            State = 1
                        },
                        new
                        {
                            Id = 7,
                            AssetID = 22,
                            AssignByID = 6,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4728),
                            AssignToID = 10,
                            Note = "Assign asset to this staff.",
                            State = 1
                        },
                        new
                        {
                            Id = 8,
                            AssetID = 23,
                            AssignByID = 4,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4730),
                            AssignToID = 14,
                            Note = "Assign asset to this staff.",
                            State = 2
                        },
                        new
                        {
                            Id = 9,
                            AssetID = 24,
                            AssignByID = 4,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4731),
                            AssignToID = 14,
                            Note = "Assign asset to this staff.",
                            State = 2
                        },
                        new
                        {
                            Id = 10,
                            AssetID = 25,
                            AssignByID = 6,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4732),
                            AssignToID = 11,
                            Note = "Assign asset to this staff.",
                            State = 2
                        },
                        new
                        {
                            Id = 11,
                            AssetID = 26,
                            AssignByID = 6,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4734),
                            AssignToID = 12,
                            Note = "Assign asset to this staff.",
                            State = 2
                        },
                        new
                        {
                            Id = 12,
                            AssetID = 27,
                            AssignByID = 4,
                            AssignDate = new DateTime(2022, 4, 8, 14, 50, 29, 992, DateTimeKind.Local).AddTicks(4735),
                            AssignToID = 12,
                            Note = "Assign asset to this staff.",
                            State = 1
                        });
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Asset", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.AssetCategory", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.Assignment", b =>
                {
                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", "AssignBy")
                        .WithMany()
                        .HasForeignKey("AssignByID");

                    b.HasOne("Rookie.AssetManagement.DataAccessor.Entities.User", "AssignTo")
                        .WithMany()
                        .HasForeignKey("AssignToID");

                    b.Navigation("Asset");

                    b.Navigation("AssignBy");

                    b.Navigation("AssignTo");
                });

            modelBuilder.Entity("Rookie.AssetManagement.DataAccessor.Entities.AssetCategory", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
